# -*- coding: utf-8 -*-
"""Treine sua primeira rede neural: classificação básica

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vE3FLraXMl-B4ruAuem6qcD8ro5glF5H

# Treine sua primeira rede neural: classificação básica

## Importando as blibiotecas necessárias
"""

import tensorflow as tf
from tensorflow import keras

import numpy as np
import matplotlib.pyplot as plt

print(tf.__version__)

"""## Importando os dados do dataset do fashion_mnist"""

fashion_mnist = keras.datasets.fashion_mnist

(train_images, train_labels), (test_images, test_labels) = fashion_mnist.load_data()

class_names = ['T-shirt/top', 'Trouser', 'Pullover', 'Dress', 'Coat',
               'Sandal', 'Shirt', 'Sneaker', 'Bag', 'Ankle boot']

"""## Analisando o tamanho dos dados"""

train_images.shape

len(train_labels)

train_labels

test_images.shape

len(test_labels)

"""## Pré-processando os dados"""

plt.figure()
plt.imshow(train_images[0])
plt.colorbar()
plt.grid(False)
plt.show()

"""***plt.figure()*** Cria uma nova imagem ou janela para os gráficos.

***plt.imshow(train_images[0])*** Exibe a imagem localizada no índice 0 do array.

***plt.colorbar()*** Cria uma barra de cores lateral.

***plt.grid(False)*** Desativa a grade na figura.

***plt.show()*** Mostra a figura para o usuário.
"""

plt.figure(figsize=(10, 10))
for i in range(25):
  plt.subplot(5, 5, i+1)
  plt.xticks([])
  plt.yticks([])
  plt.grid(False)
  plt.imshow(train_images[i], cmap=plt.cm.binary)
  plt.xlabel(class_names[train_labels[i]])
plt.show()

"""***plt.subplot(nrows, ncols, index)*** é usada para criar subgráficos em uma grade.

***plt.xticks(ticks, labels)*** cria labels("titulos") para cada linha de eixo x.

***plt.yticks()*** é igual ao x, só que no y.

***plt.xlabel()*** cria um título para todo o eixo x.

## Construindo o modelo
"""

model = keras.Sequential([
    keras.layers.Flatten(input_shape=(28, 28)),
    keras.layers.Dense(128, activation='relu'),
    keras.layers.Dense(10, activation='softmax')])

"""***keras.Sequential()*** é uma maneira de construir um modelo de rede neural em Keras onde as camadas são adicionadas de maneira sequencial.

***keras.layers.Flatten()*** pega redes multi-dimensionais e colocam em uma dimensão(vetores unidimensionais).

***keras.layers.Dense()*** https://keras.io/api/layers/core_layers/dense/ and https://keras.io/api/layers/activations/

## Compilando o modelo
"""

model.compile(
    optimizer='adam',
    loss='sparse_categorical_crossentropy',
    metrics=['accuracy']
)

"""***Optimizer*** é como o modelo se atualiza com base no dado que ele vê e sua função loss.
*   **SGD (Stochastic Gradient Descent):** Um método simples de descida do gradiente.
*  **Adam (Adaptive Moment Estimation):** Um otimizador que combina as vantagens do RMSProp e do SGD.
*  **RMSProp:** Um otimizador que adapta a taxa de aprendizado para cada parâmetro.

***Loss*** mede o quão preciso o treinamento é.
* **binary_crossentropy:** Usada para problemas de classificação binária.
* **categorical_crossentropy:** Usada para problemas de classificação multiclasse.
* **mean_squared_error:** Usada para problemas de regressão.

***Métricas*** é usada para monitorar os passos do treinamento.
* **accuracy:** A proporção de previsões corretas.
* **precision:** A proporção de previsões positivas corretas em relação ao total de previsões positivas.
* **recall:** A proporção de previsões positivas corretas em relação ao total de verdadeiros positivos.

## Treine o modelo
"""

model.fit(train_images, train_labels, epochs=10)

"""### Avalie a acurácia"""

test_loss, test_acc = model.evaluate(test_images,  test_labels, verbose=2)

print('\nTest accuracy:', test_acc)